<?php

namespace Drupal\Tests\dkan;

use Composer\Autoload\ClassLoader;
use Drupal\Core\DrupalKernel;
use Drupal\metastore\Reference\Dereferencer;
use Drupal\node\Entity\Node;
use Drupal\Tests\common\Traits\ServiceCheckTrait;
use Drupal\Tests\UnitTestCase;
use FileFetcher\FileFetcher;
use Symfony\Component\HttpFoundation\Request;

class DatasetTest extends UnitTestCase {
  use ServiceCheckTrait;

  public function setUp() {
    parent::setUp(); // TODO: Change the autogenerated stub
    $appRoot = __DIR__ . '/../../../../..';
    $classLoader = new ClassLoader();
    $kernel = new DrupalKernel('prod', $classLoader, TRUE, $appRoot);
    $kernel->handle(new Request());
  }


  public function test() {
    $downloadUrl = "http://spatialkeydocs.s3.amazonaws.com/FL_insurance_sample.csv.zip";
    $dataset = '
    {
      "title": "Test #1",
      "description": "Yep",
      "identifier": "123",
      "accessLevel": "public",
      "modified": "06-04-2020",
      "keyword": ["hello"],
        "distribution": [
          {
            "title": "blah",
            "downloadURL": "' . $downloadUrl . '",
            "mediaType": "text/csv"
          }
        ]
    }';

    /* @var $service \Drupal\metastore\Service */
    $service = \Drupal::service('dkan.metastore.service');

    $identifier = $service->post('dataset', $dataset);
    $this->assertEquals("123", $identifier);

    drupal_static('metastore_dereference_method', Dereferencer::DEREFERENCE_OUTPUT_REFERENCE_IDS);

    $datasetWithReferencesJson = $service->get('dataset', '123');
    $datasetWithReferences = json_decode($datasetWithReferencesJson);
    $this->assertEquals(
      $downloadUrl,
      $datasetWithReferences->distribution[0]->data->downloadURL->data->filePath
    );
  }

  private function removeAllNodes() {
    $nodes = Node::loadMultiple();
    foreach ($nodes as $node) {
      $node->delete();
    }
  }

  private function removeAllMappedFiles() {
    /* @var $filemappertable \Drupal\metastore\Storage\FileMapperDatabaseTable */
    $filemappertable = \Drupal::service('dkan.metastore.file_mapper_database_table');
    foreach ($filemappertable->retrieveAll() as $id) {
      $filemappertable->remove($id);
    }
  }

  private function removeAllFileFetchingJobs() {
    /* @var $jobStoreFactory \Drupal\common\Storage\JobStoreFactory */
    $jobStoreFactory = \Drupal::service('dkan.common.job_store');

    /* @var $jobStore \Drupal\common\Storage\JobStore */
    $jobStore = $jobStoreFactory->getInstance(FileFetcher::class);
    foreach ($jobStore->retrieveAll() as $id) {
      $jobStore->remove($id);
    }
  }

  private function flushQueues() {
    $dkanQueues = ['orphan_reference_processor', 'datastore_import'];
    foreach ($dkanQueues as $queueName) {
      /* @var $queueFactory \Drupal\Core\Queue\QueueFactory */
      $queueFactory = \Drupal::service('queue');
      $queue = $queueFactory->get($queueName);
      $queue->deleteQueue();
    }
  }

  private function removeFiles() {

    $dirs = ['dkan-tmp', 'distribution', 'resources'];
    foreach ($dirs as $dir) {
      $path = $this->getRelativeDruaplPath() . "/sites/default/files/{$dir}";
      if (file_exists($path)) {
        `rm -rf {$path}`;
      }
    }
  }

  public function tearDown() {
    parent::tearDown(); // TODO: Change the autogenerated stub
    $this->removeAllNodes();
    $this->removeAllMappedFiles();
    $this->removeAllFileFetchingJobs();
    $this->flushQueues();
    $this->removeFiles();
  }

}
